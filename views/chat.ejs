<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>채팅창</title>

    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <!-- jquery cdn -->
    <script
      src="https://code.jquery.com/jquery-3.6.0.min.js"
      integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
      crossorigin="anonymous"
    ></script>

    <!-- socket.io cdn -->
    <script
      src="https://cdn.socket.io/4.5.3/socket.io.min.js"
      integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi"
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="/views/css/chat.css" />
  </head>
  <body>
    <!--채팅창 UI 만들기 -->
    <div class="chat-box">
      <div id="chat-list" class="chat-list">
        <!-- 기존데이터 조회(참고용) -->
        <!-- <div class="my-chat">
          <div>user1: msg1</div>
        </div>
        <div class="other-chat">
          <div>user2: msg2</div>
        </div>
        <div class="notice">xx가 입장했습니다.</div> -->
        <!-- 기존채팅방 내용 조회 로그인 아이디값 임시('1')-->
        <% for (let i = 0; i < data.length; i++) { %> <% if (data.[i].user_index
        === '1') { %>
        <div class="my-chat">
          <div><%= data[i].user_name %></div>
          <div><%= data[i].message %></div>
        </div>
        <% } else { %>
        <div class="other-chat">
          <div><%= data[i].user_name %></div>
          <div><%= data[i].message %></div>
        </div>
        <% } %>
      </div>
      <input
        type="text"
        id="message"
        onkeyup="if(window.event.keyCode==13){send()}"
      />
      <button type="button" onclick="send();">전송</button>
    </div>

    <script>
      let socket = io.connect(); // socket 사용을 위한 객체 생성
      let myNick = "게시자1"; // 세션값받아오기 추가요 내 아이디이름 설정
      const input = document.querySelector("#message");
      const bg = document.querySelector(".chat-list");

      socket.on("connect", () => {
        console.log("**** ⭕ Client Socket Connected >>", socket.id);
        input.focus();
      });
      // 소켓에 로그인 이름 전달
      socket.emit("setNick", myNick);

      // 채팅창 입장 안내 문구
      // notice 이벤트를 받아서 공지 문구를 출력
      socket.on("notice", (msg) => {
        console.log("socket on notice >> ", msg);

        document
          .querySelector("#chat-list")
          .insertAdjacentHTML("beforeend", `<div class="notice">${msg}</div>`);
      });

      // [실습45] 채팅창 메세지 전송 Step1
      // "send" 이벤트 전송하기
      function send() {
        const data = {
          myNick: myNick,
          msg: document.querySelector("#message").value,
        };
        socket.emit("send", data);
        // 메세지내용 DB에 저장
        axios({
          method: "POST",
          url: "/chatcont/postChatcont",
          data: {
            partId: data.partId,
            message: msg,
          },
        });
      }

      // [실습45] 채팅창 메세지 전송 Step2
      // "newMessage" 이벤트를 전달받기 { 닉네임, 메세지내용 }
      // data => { nick: 'a', msg: 'hello' }
      socket.on("newMessage", (data) => {
        console.log("socket on newMessage >> ", data);

        // 생성해야할 채팅 html 구조
        // <div class="my-chat">
        //   <div>user1: msg1</div>
        // </div>
        // <div class="other-chat">
        //   <div>user2: msg2</div>
        // </div>
        let chatList = document.querySelector("#chat-list"); // #chat-list 선택
        let div = document.createElement("div"); // .my-chat or .other-chat 생성
        // <div></div>
        // 닉네임분리
        let divNick = document.createElement("div"); // 가장 안쪽 div (메세지 박스) 생성

        let divChat = document.createElement("div"); // 가장 안쪽 div (메세지 박스) 생성
        // <div></div>
        // 스크롤 포커스

        // 새 메세지(data => { nick: 'a', msg: 'hello' })가 도착했는데
        // myNick에 저장된 현재 내 닉네임과
        // 새 메세지(data)의 nick이 같다면, 내가 보낸 채팅
        // 새 메세지(data)의 nick이 다르면, 상대방이 보낸 채팅
        if (myNick === data.nick) {
          div.classList.add("my-chat"); // <div class="my-chat"></div>
        } else {
          div.classList.add("other-chat"); // <div class="other-chat"></div>
        }
        // [실습46] DM기능 추가
        console.log("send data check >>", data);
        // {nick: '2121', msg: 'dd'}

        // 닉네임 분리
        // console.log(`${data.nick}`);
        console.log("닉네임분리:", divNick.textContent);
        divNick.textContent = `${data.nick}`; // <div> nick</div>

        divChat.textContent += `${data.msg}`; // <div> (속닥속닥) : msg</div>
        div.append(divNick);
        div.append(divChat);
        chatList.append(div);
        // 스크롤 포커스
        bg.scrollTop = bg.scrollHeight;
        //입력후에 다시 포커스 맞추기
        input.focus();

        //입력된 input의 value 지우기.
        input.value = "";
      });
    </script>
  </body>
</html>
