<!DOCTYPE html>
<html lang="ko">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Study Town</title>
    <%- include('./favicon.ejs') %>

        <!-- axios cdn -->
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

        <!-- jquery cdn -->
        <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

        <!-- socket.io cdn -->
        <script src="https://cdn.socket.io/4.5.3/socket.io.min.js" integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous"></script>
        <link rel="stylesheet" href="../static/css/chat.css" />
        <link rel="stylesheet" href="../static/css/nav.css" />
</head>

<body>
    <!--채팅창 UI 만들기 -->

    <%- include('./nav.ejs') %>

    <div class="chat-section">
      <div class="chat-users">
        <div class="chat-room-title">채팅방</div>
        <div class="chat-user">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-person"
            viewBox="0 0 16 16"
          >
            <path
              d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z"
            />
          </svg>
        </div>
      </div>
      <div class="chat-room">
        <div id="chat-list" class="chat-list">
          <% for (let i = 0; i < data.length; i++) { %> <% if (data[i].user_index
            === thisId) { %>
            <div class="my-chat">
              <div><%= data[i].user_name %></div>
              <div><%= data[i].message %></div>
            </div>
            <% } else { %>
            <div class="other-chat">
              <div><%= data[i].user_name %></div>
              <div><%= data[i].message %></div>
            </div>
            <% } %> <% } %>
          </div>
          </div>
        </div>

        <div class="chat-input">
          <textarea
            type="text"
            name="chat"
            id="message"
            placeholder="...메세지 작성 후 엔터키 눌러주세요"
            onkeyup="if(window.event.keyCode==13){send()}"
          ></textarea>
      </div>
    </div>

        <div class="chat-input">
            <textarea type="text" name="chat" id="message" placeholder="...메세지 작성 후 엔터키 눌러주세요" onkeyup="if(window.event.keyCode==13){send()}"></textarea>
        </div>
        </div>

        <!-- [실습44-2] 채팅창 입장 문구 안내 socket.it -> nickname -->
        <!-- <div class="entry-box">
      <input
        type="text"
        id="nickname"
        placeholder="닉네임"
        autofocus
        onkeyup="if(window.event.keyCode==13){entry()}"
      />
      <button type="button" onclick="entry();">입장</button>
    </div> -->

    <!-- [실습43] 채팅창 UI 만들기 -->
    <div class="part-id"><%= partId %></div>
    <div class="room-id"><%= roomId %></div>
    <div class="login-id"><%= thisId %></div>
        <!-- 기존데이터 조회(참고용) -->
        <!-- <div class="my-chat">
          <div>user1: msg1</div>
        </div>
        <div class="other-chat">
          <div>user2: msg2</div>
        </div>
        <div class="notice">xx가 입장했습니다.</div> -->
        <!-- 기존채팅방 내용 조회 로그인 아이디값 임시('1')-->
      <!-- <input
        type="text"
        id="message"
        onkeyup="if(window.event.keyCode==13){send()}"
      />
      <button type="button" onclick="send();">전송</button> -->

    <script>
      let socket = io.connect(); // socket 사용을 위한 객체 생성
      let myNick; // user테이블조회해서가져옴
      const input = document.querySelector("#message");
      const bg = document.querySelector(".chat-list");
      const roomId = document.querySelector(".room-id").textContent;
      const id = document.querySelector(".login-id").textContent;
      let partId;
      socket.on("connect", async () => {
        console.log("**** ⭕ Client Socket Connected >>", socket.id);
        let setNick = await setUsername();
        console.log('****************', setNick )
        input.focus();
        // console.dir("setUsername()", setUsername());
        // 소켓에 로그인 이름 전달
        socket.emit("setNick", setNick);
      });
      async function setUsername() {
        let result4 = await axios({
          method: "GET",
          url: `/sign/getUsername?id=${id}`,
          })
          console.log("4 username조회: ", result4.data);
          console.log("'4-1 username 조회 결과: ", result4.data.user_name);
          // user_name값 넣기
          myNick = result4.data.user_name;
          console.log("'4-2 username 입력 결과: ", myNick);
          return myNick;  
        // let result4 = await axios({
        //   method: "GET",
        //   url: `/sign/getUsername?id=${id}`,
        //   }).then((res) => {
        //     console.log("4 username조회: ", res.data);
        //     console.log("'4-1 username 조회 결과: ", res.data.user_name);
        //     // user_name값 넣기
        //     myNick = res.data.user_name;
        //   });
        // console.log("'4-2 username 입력 결과: ", myNick);
        // return myNick;  
      }
      
      // 채팅창 입장 안내 문구
      // notice 이벤트를 받아서 공지 문구를 출력
      socket.on("notice", (msg) => {
        console.log("socket on notice >> ", msg);
        document
          .querySelector("#chat-list")
          .insertAdjacentHTML("beforeend", `<div class="notice">${msg}</div>`);
      });
      // [실습45] 채팅창 메세지 전송 Step1
      // "send" 이벤트 전송하기
      async function send() {
        // user_name 조회
        const data = {
          myNick: myNick,
          msg: document.querySelector("#message").value,
        };
        socket.emit("send", data);
        console.log(data.msg);
        console.log("partId 인서트전", partId);
        console.log("partId조회 전", partId);
        // part_id조회
        // 로그인 세션 값 받아와야함...id에 넣어야함
        let result3 = await axios({
          method: "GET",
          url: `/part/getpartid?roomId=${roomId}&id=${id}`,
        }).then((res) => {
          console.log("3partid조회: ", res.data);
          return res.data;
        });
        console.log("'2 part 조회 결과: ", result3);
        // partid값 넣기
        partId = result3.part_id;
        console.log("'3 part 입력 결과: ", partId);
        console.log("partId 인서트전", partId);
        // 메세지내용 DB에 저장
        axios({
          method: "POST",
          url: "/chatcont/postChatcont",
          data: {
            partId: partId,
            message: data.msg,
          },
        })
          .then((res) => {
            console.log(res);
            console.log(res.data);
            return res.data;
          })
          .then((data) => {
            console.log("인서트됐는지확인용", data); // {id: 8, name: 'ㅁㅁ', comment: 'ㅁㅁ'}
          });
      }
      //  = document.querySelector(".part-id").textContent
      // [실습45] 채팅창 메세지 전송 Step2
      // "newMessage" 이벤트를 전달받기 { 닉네임, 메세지내용 }
      // data => { nick: 'a', msg: 'hello' }
      socket.on("newMessage", (data) => {
        console.log("socket on newMessage >> ", data);
        // 생성해야할 채팅 html 구조
        // <div class="my-chat">
        //   <div>user1: msg1</div>
        // </div>
        // <div class="other-chat">
        //   <div>user2: msg2</div>
        // </div>
        let chatList = document.querySelector("#chat-list"); // #chat-list 선택
        let div = document.createElement("div"); // .my-chat or .other-chat 생성
        // <div></div>
        // 닉네임분리
        let divNick = document.createElement("div"); // 가장 안쪽 div (메세지 박스) 생성
        let divChat = document.createElement("div"); // 가장 안쪽 div (메세지 박스) 생성
        // <div></div>
        // 스크롤 포커스
        // 새 메세지(data => { nick: 'a', msg: 'hello' })가 도착했는데
        // myNick에 저장된 현재 내 닉네임과
        // 새 메세지(data)의 nick이 같다면, 내가 보낸 채팅
        // 새 메세지(data)의 nick이 다르면, 상대방이 보낸 채팅
        if (myNick === data.nick) {
          div.classList.add("my-chat"); // <div class="my-chat"></div>
        } else {
          div.classList.add("other-chat"); // <div class="other-chat"></div>
        }
        // [실습46] DM기능 추가
        console.log("send data check >>", data);
        // {nick: '2121', msg: 'dd'}
        // 닉네임 분리
        // console.log(`${data.nick}`);
        console.log("닉네임분리:", divNick.textContent);
        divNick.textContent = `${data.nick}`; // <div> nick</div>
        divChat.textContent += `${data.msg}`; // <div> (속닥속닥) : msg</div>
        div.append(divNick);
        div.append(divChat);
        chatList.append(div);
        // 스크롤 포커스
        bg.scrollTop = bg.scrollHeight;
        //입력후에 다시 포커스 맞추기
        input.focus();
        //입력된 input의 value 지우기.
        input.value = "";
      });
    </script>
  </body>
</html>